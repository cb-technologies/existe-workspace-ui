// source: person_info_msg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.pb.Address', null, global);
goog.exportSymbol('proto.pb.Biometric', null, global);
goog.exportSymbol('proto.pb.CardValidity', null, global);
goog.exportSymbol('proto.pb.Date', null, global);
goog.exportSymbol('proto.pb.DateOfBirth', null, global);
goog.exportSymbol('proto.pb.EditPersonInfoParameters', null, global);
goog.exportSymbol('proto.pb.Names', null, global);
goog.exportSymbol('proto.pb.NationalIDNumber', null, global);
goog.exportSymbol('proto.pb.Origin', null, global);
goog.exportSymbol('proto.pb.PersonInfoRequest', null, global);
goog.exportSymbol('proto.pb.PersonInfoResponse', null, global);
goog.exportSymbol('proto.pb.Phenotype', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Address.displayName = 'proto.pb.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Names = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Names.repeatedFields_, null);
};
goog.inherits(proto.pb.Names, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Names.displayName = 'proto.pb.Names';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Origin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Origin.repeatedFields_, null);
};
goog.inherits(proto.pb.Origin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Origin.displayName = 'proto.pb.Origin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Phenotype = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Phenotype, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Phenotype.displayName = 'proto.pb.Phenotype';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Biometric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Biometric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Biometric.displayName = 'proto.pb.Biometric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.DateOfBirth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.DateOfBirth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.DateOfBirth.displayName = 'proto.pb.DateOfBirth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.NationalIDNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.NationalIDNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.NationalIDNumber.displayName = 'proto.pb.NationalIDNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Date = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Date.displayName = 'proto.pb.Date';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CardValidity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.CardValidity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CardValidity.displayName = 'proto.pb.CardValidity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PersonInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.PersonInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PersonInfoRequest.displayName = 'proto.pb.PersonInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PersonInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.PersonInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PersonInfoResponse.displayName = 'proto.pb.PersonInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.EditPersonInfoParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.EditPersonInfoParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EditPersonInfoParameters.displayName = 'proto.pb.EditPersonInfoParameters';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    avenue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quartier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    commune: jspb.Message.getFieldWithDefault(msg, 4, ""),
    zipCode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    province: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ville: jspb.Message.getFieldWithDefault(msg, 7, ""),
    reference: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Address}
 */
proto.pb.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Address;
  return proto.pb.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Address}
 */
proto.pb.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvenue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuartier(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommune(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setZipCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvince(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVille(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAvenue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuartier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCommune();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getZipCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProvince();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVille();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 number = 1;
 * @return {number}
 */
proto.pb.Address.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string avenue = 2;
 * @return {string}
 */
proto.pb.Address.prototype.getAvenue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setAvenue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quartier = 3;
 * @return {string}
 */
proto.pb.Address.prototype.getQuartier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setQuartier = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string commune = 4;
 * @return {string}
 */
proto.pb.Address.prototype.getCommune = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setCommune = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string zip_code = 5;
 * @return {string}
 */
proto.pb.Address.prototype.getZipCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setZipCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string province = 6;
 * @return {string}
 */
proto.pb.Address.prototype.getProvince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setProvince = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string ville = 7;
 * @return {string}
 */
proto.pb.Address.prototype.getVille = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setVille = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string reference = 8;
 * @return {string}
 */
proto.pb.Address.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Address} returns this
 */
proto.pb.Address.prototype.setReference = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Names.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Names.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Names.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Names} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Names.toObject = function(includeInstance, msg) {
  var f, obj = {
    nom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prenom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    middleNamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Names}
 */
proto.pb.Names.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Names;
  return proto.pb.Names.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Names} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Names}
 */
proto.pb.Names.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrenom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMiddleNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Names.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Names.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Names} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Names.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMiddleNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string nom = 1;
 * @return {string}
 */
proto.pb.Names.prototype.getNom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Names} returns this
 */
proto.pb.Names.prototype.setNom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string prenom = 2;
 * @return {string}
 */
proto.pb.Names.prototype.getPrenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Names} returns this
 */
proto.pb.Names.prototype.setPrenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string middle_names = 3;
 * @return {!Array<string>}
 */
proto.pb.Names.prototype.getMiddleNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.Names} returns this
 */
proto.pb.Names.prototype.setMiddleNamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.Names} returns this
 */
proto.pb.Names.prototype.addMiddleNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Names} returns this
 */
proto.pb.Names.prototype.clearMiddleNamesList = function() {
  return this.setMiddleNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Origin.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Origin.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Origin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Origin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Origin.toObject = function(includeInstance, msg) {
  var f, obj = {
    provinceList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    chefLieu: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Origin}
 */
proto.pb.Origin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Origin;
  return proto.pb.Origin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Origin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Origin}
 */
proto.pb.Origin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addProvince(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChefLieu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Origin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Origin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Origin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Origin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvinceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getChefLieu();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string province = 1;
 * @return {!Array<string>}
 */
proto.pb.Origin.prototype.getProvinceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.Origin} returns this
 */
proto.pb.Origin.prototype.setProvinceList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.Origin} returns this
 */
proto.pb.Origin.prototype.addProvince = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Origin} returns this
 */
proto.pb.Origin.prototype.clearProvinceList = function() {
  return this.setProvinceList([]);
};


/**
 * optional string chef_lieu = 2;
 * @return {string}
 */
proto.pb.Origin.prototype.getChefLieu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Origin} returns this
 */
proto.pb.Origin.prototype.setChefLieu = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Phenotype.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Phenotype.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Phenotype} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Phenotype.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    eyeColor: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Phenotype}
 */
proto.pb.Phenotype.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Phenotype;
  return proto.pb.Phenotype.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Phenotype} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Phenotype}
 */
proto.pb.Phenotype.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEyeColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Phenotype.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Phenotype.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Phenotype} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Phenotype.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEyeColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional float height = 1;
 * @return {number}
 */
proto.pb.Phenotype.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Phenotype} returns this
 */
proto.pb.Phenotype.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float weight = 2;
 * @return {number}
 */
proto.pb.Phenotype.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Phenotype} returns this
 */
proto.pb.Phenotype.prototype.setWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string eye_color = 3;
 * @return {string}
 */
proto.pb.Phenotype.prototype.getEyeColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Phenotype} returns this
 */
proto.pb.Phenotype.prototype.setEyeColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Biometric.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Biometric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Biometric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Biometric.toObject = function(includeInstance, msg) {
  var f, obj = {
    photos: msg.getPhotos_asB64(),
    fingerPrint: msg.getFingerPrint_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Biometric}
 */
proto.pb.Biometric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Biometric;
  return proto.pb.Biometric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Biometric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Biometric}
 */
proto.pb.Biometric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPhotos(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFingerPrint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Biometric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Biometric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Biometric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Biometric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhotos_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFingerPrint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes photos = 1;
 * @return {string}
 */
proto.pb.Biometric.prototype.getPhotos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes photos = 1;
 * This is a type-conversion wrapper around `getPhotos()`
 * @return {string}
 */
proto.pb.Biometric.prototype.getPhotos_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPhotos()));
};


/**
 * optional bytes photos = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPhotos()`
 * @return {!Uint8Array}
 */
proto.pb.Biometric.prototype.getPhotos_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPhotos()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Biometric} returns this
 */
proto.pb.Biometric.prototype.setPhotos = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes finger_print = 2;
 * @return {string}
 */
proto.pb.Biometric.prototype.getFingerPrint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes finger_print = 2;
 * This is a type-conversion wrapper around `getFingerPrint()`
 * @return {string}
 */
proto.pb.Biometric.prototype.getFingerPrint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFingerPrint()));
};


/**
 * optional bytes finger_print = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFingerPrint()`
 * @return {!Uint8Array}
 */
proto.pb.Biometric.prototype.getFingerPrint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFingerPrint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Biometric} returns this
 */
proto.pb.Biometric.prototype.setFingerPrint = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.DateOfBirth.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.DateOfBirth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.DateOfBirth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DateOfBirth.toObject = function(includeInstance, msg) {
  var f, obj = {
    day: jspb.Message.getFieldWithDefault(msg, 1, ""),
    month: jspb.Message.getFieldWithDefault(msg, 2, ""),
    year: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.DateOfBirth}
 */
proto.pb.DateOfBirth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.DateOfBirth;
  return proto.pb.DateOfBirth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.DateOfBirth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.DateOfBirth}
 */
proto.pb.DateOfBirth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDay(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.DateOfBirth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.DateOfBirth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.DateOfBirth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DateOfBirth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDay();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getYear();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string day = 1;
 * @return {string}
 */
proto.pb.DateOfBirth.prototype.getDay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.DateOfBirth} returns this
 */
proto.pb.DateOfBirth.prototype.setDay = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string month = 2;
 * @return {string}
 */
proto.pb.DateOfBirth.prototype.getMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.DateOfBirth} returns this
 */
proto.pb.DateOfBirth.prototype.setMonth = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string year = 3;
 * @return {string}
 */
proto.pb.DateOfBirth.prototype.getYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.DateOfBirth} returns this
 */
proto.pb.DateOfBirth.prototype.setYear = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.NationalIDNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.NationalIDNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.NationalIDNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.NationalIDNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.NationalIDNumber}
 */
proto.pb.NationalIDNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.NationalIDNumber;
  return proto.pb.NationalIDNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.NationalIDNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.NationalIDNumber}
 */
proto.pb.NationalIDNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.NationalIDNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.NationalIDNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.NationalIDNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.NationalIDNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.NationalIDNumber.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.NationalIDNumber} returns this
 */
proto.pb.NationalIDNumber.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Date.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Date.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Date} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Date.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: jspb.Message.getFieldWithDefault(msg, 1, 0),
    month: jspb.Message.getFieldWithDefault(msg, 2, 0),
    day: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Date}
 */
proto.pb.Date.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Date;
  return proto.pb.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Date}
 */
proto.pb.Date.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Date.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Date.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.pb.Date.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Date} returns this
 */
proto.pb.Date.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 month = 2;
 * @return {number}
 */
proto.pb.Date.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Date} returns this
 */
proto.pb.Date.prototype.setMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 day = 3;
 * @return {number}
 */
proto.pb.Date.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Date} returns this
 */
proto.pb.Date.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CardValidity.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CardValidity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CardValidity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CardValidity.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuedate: (f = msg.getIssuedate()) && proto.pb.Date.toObject(includeInstance, f),
    expirationdate: (f = msg.getExpirationdate()) && proto.pb.Date.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CardValidity}
 */
proto.pb.CardValidity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CardValidity;
  return proto.pb.CardValidity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CardValidity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CardValidity}
 */
proto.pb.CardValidity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Date;
      reader.readMessage(value,proto.pb.Date.deserializeBinaryFromReader);
      msg.setIssuedate(value);
      break;
    case 2:
      var value = new proto.pb.Date;
      reader.readMessage(value,proto.pb.Date.deserializeBinaryFromReader);
      msg.setExpirationdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CardValidity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CardValidity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CardValidity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CardValidity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuedate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getExpirationdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Date.serializeBinaryToWriter
    );
  }
};


/**
 * optional Date IssueDate = 1;
 * @return {?proto.pb.Date}
 */
proto.pb.CardValidity.prototype.getIssuedate = function() {
  return /** @type{?proto.pb.Date} */ (
    jspb.Message.getWrapperField(this, proto.pb.Date, 1));
};


/**
 * @param {?proto.pb.Date|undefined} value
 * @return {!proto.pb.CardValidity} returns this
*/
proto.pb.CardValidity.prototype.setIssuedate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.CardValidity} returns this
 */
proto.pb.CardValidity.prototype.clearIssuedate = function() {
  return this.setIssuedate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.CardValidity.prototype.hasIssuedate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Date ExpirationDate = 2;
 * @return {?proto.pb.Date}
 */
proto.pb.CardValidity.prototype.getExpirationdate = function() {
  return /** @type{?proto.pb.Date} */ (
    jspb.Message.getWrapperField(this, proto.pb.Date, 2));
};


/**
 * @param {?proto.pb.Date|undefined} value
 * @return {!proto.pb.CardValidity} returns this
*/
proto.pb.CardValidity.prototype.setExpirationdate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.CardValidity} returns this
 */
proto.pb.CardValidity.prototype.clearExpirationdate = function() {
  return this.setExpirationdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.CardValidity.prototype.hasExpirationdate = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PersonInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PersonInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PersonInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PersonInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    names: (f = msg.getNames()) && proto.pb.Names.toObject(includeInstance, f),
    biometrics: (f = msg.getBiometrics()) && proto.pb.Biometric.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto.pb.Address.toObject(includeInstance, f),
    origins: (f = msg.getOrigins()) && proto.pb.Origin.toObject(includeInstance, f),
    phenotypes: (f = msg.getPhenotypes()) && proto.pb.Phenotype.toObject(includeInstance, f),
    dateOfBirth: (f = msg.getDateOfBirth()) && proto.pb.DateOfBirth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PersonInfoRequest}
 */
proto.pb.PersonInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PersonInfoRequest;
  return proto.pb.PersonInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PersonInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PersonInfoRequest}
 */
proto.pb.PersonInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Names;
      reader.readMessage(value,proto.pb.Names.deserializeBinaryFromReader);
      msg.setNames(value);
      break;
    case 2:
      var value = new proto.pb.Biometric;
      reader.readMessage(value,proto.pb.Biometric.deserializeBinaryFromReader);
      msg.setBiometrics(value);
      break;
    case 3:
      var value = new proto.pb.Address;
      reader.readMessage(value,proto.pb.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 4:
      var value = new proto.pb.Origin;
      reader.readMessage(value,proto.pb.Origin.deserializeBinaryFromReader);
      msg.setOrigins(value);
      break;
    case 5:
      var value = new proto.pb.Phenotype;
      reader.readMessage(value,proto.pb.Phenotype.deserializeBinaryFromReader);
      msg.setPhenotypes(value);
      break;
    case 6:
      var value = new proto.pb.DateOfBirth;
      reader.readMessage(value,proto.pb.DateOfBirth.deserializeBinaryFromReader);
      msg.setDateOfBirth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PersonInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PersonInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PersonInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PersonInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNames();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Names.serializeBinaryToWriter
    );
  }
  f = message.getBiometrics();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Biometric.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getOrigins();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.Origin.serializeBinaryToWriter
    );
  }
  f = message.getPhenotypes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pb.Phenotype.serializeBinaryToWriter
    );
  }
  f = message.getDateOfBirth();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pb.DateOfBirth.serializeBinaryToWriter
    );
  }
};


/**
 * optional Names names = 1;
 * @return {?proto.pb.Names}
 */
proto.pb.PersonInfoRequest.prototype.getNames = function() {
  return /** @type{?proto.pb.Names} */ (
    jspb.Message.getWrapperField(this, proto.pb.Names, 1));
};


/**
 * @param {?proto.pb.Names|undefined} value
 * @return {!proto.pb.PersonInfoRequest} returns this
*/
proto.pb.PersonInfoRequest.prototype.setNames = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoRequest} returns this
 */
proto.pb.PersonInfoRequest.prototype.clearNames = function() {
  return this.setNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoRequest.prototype.hasNames = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Biometric biometrics = 2;
 * @return {?proto.pb.Biometric}
 */
proto.pb.PersonInfoRequest.prototype.getBiometrics = function() {
  return /** @type{?proto.pb.Biometric} */ (
    jspb.Message.getWrapperField(this, proto.pb.Biometric, 2));
};


/**
 * @param {?proto.pb.Biometric|undefined} value
 * @return {!proto.pb.PersonInfoRequest} returns this
*/
proto.pb.PersonInfoRequest.prototype.setBiometrics = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoRequest} returns this
 */
proto.pb.PersonInfoRequest.prototype.clearBiometrics = function() {
  return this.setBiometrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoRequest.prototype.hasBiometrics = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address address = 3;
 * @return {?proto.pb.Address}
 */
proto.pb.PersonInfoRequest.prototype.getAddress = function() {
  return /** @type{?proto.pb.Address} */ (
    jspb.Message.getWrapperField(this, proto.pb.Address, 3));
};


/**
 * @param {?proto.pb.Address|undefined} value
 * @return {!proto.pb.PersonInfoRequest} returns this
*/
proto.pb.PersonInfoRequest.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoRequest} returns this
 */
proto.pb.PersonInfoRequest.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoRequest.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Origin origins = 4;
 * @return {?proto.pb.Origin}
 */
proto.pb.PersonInfoRequest.prototype.getOrigins = function() {
  return /** @type{?proto.pb.Origin} */ (
    jspb.Message.getWrapperField(this, proto.pb.Origin, 4));
};


/**
 * @param {?proto.pb.Origin|undefined} value
 * @return {!proto.pb.PersonInfoRequest} returns this
*/
proto.pb.PersonInfoRequest.prototype.setOrigins = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoRequest} returns this
 */
proto.pb.PersonInfoRequest.prototype.clearOrigins = function() {
  return this.setOrigins(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoRequest.prototype.hasOrigins = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Phenotype phenotypes = 5;
 * @return {?proto.pb.Phenotype}
 */
proto.pb.PersonInfoRequest.prototype.getPhenotypes = function() {
  return /** @type{?proto.pb.Phenotype} */ (
    jspb.Message.getWrapperField(this, proto.pb.Phenotype, 5));
};


/**
 * @param {?proto.pb.Phenotype|undefined} value
 * @return {!proto.pb.PersonInfoRequest} returns this
*/
proto.pb.PersonInfoRequest.prototype.setPhenotypes = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoRequest} returns this
 */
proto.pb.PersonInfoRequest.prototype.clearPhenotypes = function() {
  return this.setPhenotypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoRequest.prototype.hasPhenotypes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DateOfBirth date_of_birth = 6;
 * @return {?proto.pb.DateOfBirth}
 */
proto.pb.PersonInfoRequest.prototype.getDateOfBirth = function() {
  return /** @type{?proto.pb.DateOfBirth} */ (
    jspb.Message.getWrapperField(this, proto.pb.DateOfBirth, 6));
};


/**
 * @param {?proto.pb.DateOfBirth|undefined} value
 * @return {!proto.pb.PersonInfoRequest} returns this
*/
proto.pb.PersonInfoRequest.prototype.setDateOfBirth = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoRequest} returns this
 */
proto.pb.PersonInfoRequest.prototype.clearDateOfBirth = function() {
  return this.setDateOfBirth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoRequest.prototype.hasDateOfBirth = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PersonInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PersonInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PersonInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PersonInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    names: (f = msg.getNames()) && proto.pb.Names.toObject(includeInstance, f),
    biometrics: (f = msg.getBiometrics()) && proto.pb.Biometric.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto.pb.Address.toObject(includeInstance, f),
    origins: (f = msg.getOrigins()) && proto.pb.Origin.toObject(includeInstance, f),
    phenotypes: (f = msg.getPhenotypes()) && proto.pb.Phenotype.toObject(includeInstance, f),
    dateOfBirth: (f = msg.getDateOfBirth()) && proto.pb.DateOfBirth.toObject(includeInstance, f),
    cardValidity: (f = msg.getCardValidity()) && proto.pb.CardValidity.toObject(includeInstance, f),
    id: (f = msg.getId()) && proto.pb.NationalIDNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PersonInfoResponse}
 */
proto.pb.PersonInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PersonInfoResponse;
  return proto.pb.PersonInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PersonInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PersonInfoResponse}
 */
proto.pb.PersonInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Names;
      reader.readMessage(value,proto.pb.Names.deserializeBinaryFromReader);
      msg.setNames(value);
      break;
    case 2:
      var value = new proto.pb.Biometric;
      reader.readMessage(value,proto.pb.Biometric.deserializeBinaryFromReader);
      msg.setBiometrics(value);
      break;
    case 3:
      var value = new proto.pb.Address;
      reader.readMessage(value,proto.pb.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 4:
      var value = new proto.pb.Origin;
      reader.readMessage(value,proto.pb.Origin.deserializeBinaryFromReader);
      msg.setOrigins(value);
      break;
    case 5:
      var value = new proto.pb.Phenotype;
      reader.readMessage(value,proto.pb.Phenotype.deserializeBinaryFromReader);
      msg.setPhenotypes(value);
      break;
    case 6:
      var value = new proto.pb.DateOfBirth;
      reader.readMessage(value,proto.pb.DateOfBirth.deserializeBinaryFromReader);
      msg.setDateOfBirth(value);
      break;
    case 7:
      var value = new proto.pb.CardValidity;
      reader.readMessage(value,proto.pb.CardValidity.deserializeBinaryFromReader);
      msg.setCardValidity(value);
      break;
    case 8:
      var value = new proto.pb.NationalIDNumber;
      reader.readMessage(value,proto.pb.NationalIDNumber.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PersonInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PersonInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PersonInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PersonInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNames();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Names.serializeBinaryToWriter
    );
  }
  f = message.getBiometrics();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Biometric.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getOrigins();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.Origin.serializeBinaryToWriter
    );
  }
  f = message.getPhenotypes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pb.Phenotype.serializeBinaryToWriter
    );
  }
  f = message.getDateOfBirth();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pb.DateOfBirth.serializeBinaryToWriter
    );
  }
  f = message.getCardValidity();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.pb.CardValidity.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.pb.NationalIDNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional Names names = 1;
 * @return {?proto.pb.Names}
 */
proto.pb.PersonInfoResponse.prototype.getNames = function() {
  return /** @type{?proto.pb.Names} */ (
    jspb.Message.getWrapperField(this, proto.pb.Names, 1));
};


/**
 * @param {?proto.pb.Names|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setNames = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearNames = function() {
  return this.setNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasNames = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Biometric biometrics = 2;
 * @return {?proto.pb.Biometric}
 */
proto.pb.PersonInfoResponse.prototype.getBiometrics = function() {
  return /** @type{?proto.pb.Biometric} */ (
    jspb.Message.getWrapperField(this, proto.pb.Biometric, 2));
};


/**
 * @param {?proto.pb.Biometric|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setBiometrics = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearBiometrics = function() {
  return this.setBiometrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasBiometrics = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address address = 3;
 * @return {?proto.pb.Address}
 */
proto.pb.PersonInfoResponse.prototype.getAddress = function() {
  return /** @type{?proto.pb.Address} */ (
    jspb.Message.getWrapperField(this, proto.pb.Address, 3));
};


/**
 * @param {?proto.pb.Address|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Origin origins = 4;
 * @return {?proto.pb.Origin}
 */
proto.pb.PersonInfoResponse.prototype.getOrigins = function() {
  return /** @type{?proto.pb.Origin} */ (
    jspb.Message.getWrapperField(this, proto.pb.Origin, 4));
};


/**
 * @param {?proto.pb.Origin|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setOrigins = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearOrigins = function() {
  return this.setOrigins(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasOrigins = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Phenotype phenotypes = 5;
 * @return {?proto.pb.Phenotype}
 */
proto.pb.PersonInfoResponse.prototype.getPhenotypes = function() {
  return /** @type{?proto.pb.Phenotype} */ (
    jspb.Message.getWrapperField(this, proto.pb.Phenotype, 5));
};


/**
 * @param {?proto.pb.Phenotype|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setPhenotypes = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearPhenotypes = function() {
  return this.setPhenotypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasPhenotypes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DateOfBirth date_of_birth = 6;
 * @return {?proto.pb.DateOfBirth}
 */
proto.pb.PersonInfoResponse.prototype.getDateOfBirth = function() {
  return /** @type{?proto.pb.DateOfBirth} */ (
    jspb.Message.getWrapperField(this, proto.pb.DateOfBirth, 6));
};


/**
 * @param {?proto.pb.DateOfBirth|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setDateOfBirth = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearDateOfBirth = function() {
  return this.setDateOfBirth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasDateOfBirth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CardValidity card_validity = 7;
 * @return {?proto.pb.CardValidity}
 */
proto.pb.PersonInfoResponse.prototype.getCardValidity = function() {
  return /** @type{?proto.pb.CardValidity} */ (
    jspb.Message.getWrapperField(this, proto.pb.CardValidity, 7));
};


/**
 * @param {?proto.pb.CardValidity|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setCardValidity = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearCardValidity = function() {
  return this.setCardValidity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasCardValidity = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NationalIDNumber id = 8;
 * @return {?proto.pb.NationalIDNumber}
 */
proto.pb.PersonInfoResponse.prototype.getId = function() {
  return /** @type{?proto.pb.NationalIDNumber} */ (
    jspb.Message.getWrapperField(this, proto.pb.NationalIDNumber, 8));
};


/**
 * @param {?proto.pb.NationalIDNumber|undefined} value
 * @return {!proto.pb.PersonInfoResponse} returns this
*/
proto.pb.PersonInfoResponse.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PersonInfoResponse} returns this
 */
proto.pb.PersonInfoResponse.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PersonInfoResponse.prototype.hasId = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.EditPersonInfoParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.EditPersonInfoParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.EditPersonInfoParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EditPersonInfoParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    personid: (f = msg.getPersonid()) && proto.pb.NationalIDNumber.toObject(includeInstance, f),
    editedpersoninfo: (f = msg.getEditedpersoninfo()) && proto.pb.PersonInfoRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EditPersonInfoParameters}
 */
proto.pb.EditPersonInfoParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EditPersonInfoParameters;
  return proto.pb.EditPersonInfoParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EditPersonInfoParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EditPersonInfoParameters}
 */
proto.pb.EditPersonInfoParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.NationalIDNumber;
      reader.readMessage(value,proto.pb.NationalIDNumber.deserializeBinaryFromReader);
      msg.setPersonid(value);
      break;
    case 2:
      var value = new proto.pb.PersonInfoRequest;
      reader.readMessage(value,proto.pb.PersonInfoRequest.deserializeBinaryFromReader);
      msg.setEditedpersoninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.EditPersonInfoParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.EditPersonInfoParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EditPersonInfoParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EditPersonInfoParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPersonid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.NationalIDNumber.serializeBinaryToWriter
    );
  }
  f = message.getEditedpersoninfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.PersonInfoRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional NationalIDNumber personId = 1;
 * @return {?proto.pb.NationalIDNumber}
 */
proto.pb.EditPersonInfoParameters.prototype.getPersonid = function() {
  return /** @type{?proto.pb.NationalIDNumber} */ (
    jspb.Message.getWrapperField(this, proto.pb.NationalIDNumber, 1));
};


/**
 * @param {?proto.pb.NationalIDNumber|undefined} value
 * @return {!proto.pb.EditPersonInfoParameters} returns this
*/
proto.pb.EditPersonInfoParameters.prototype.setPersonid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.EditPersonInfoParameters} returns this
 */
proto.pb.EditPersonInfoParameters.prototype.clearPersonid = function() {
  return this.setPersonid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.EditPersonInfoParameters.prototype.hasPersonid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PersonInfoRequest editedPersonInfo = 2;
 * @return {?proto.pb.PersonInfoRequest}
 */
proto.pb.EditPersonInfoParameters.prototype.getEditedpersoninfo = function() {
  return /** @type{?proto.pb.PersonInfoRequest} */ (
    jspb.Message.getWrapperField(this, proto.pb.PersonInfoRequest, 2));
};


/**
 * @param {?proto.pb.PersonInfoRequest|undefined} value
 * @return {!proto.pb.EditPersonInfoParameters} returns this
*/
proto.pb.EditPersonInfoParameters.prototype.setEditedpersoninfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.EditPersonInfoParameters} returns this
 */
proto.pb.EditPersonInfoParameters.prototype.clearEditedpersoninfo = function() {
  return this.setEditedpersoninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.EditPersonInfoParameters.prototype.hasEditedpersoninfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.pb);
